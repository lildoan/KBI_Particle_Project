import pandas as pd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from numexpr import evaluate
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
import seaborn as sns
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.ensemble import RandomForestClassifier
"""""
#plots for max depth
df = pd.read_csv('categorized_particles.csv')
df.type.values.reshape(-1, 1).shape
feat_to_drop = ['type','step','experiment','particle_id']
test_feat_drop = ['type','step','experiment','particle_id']
max_depth_range = list(range(1,9))
accuracy = []
X=df.drop(feat_to_drop, axis=1)
Y=df['type'].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 0)
for depth in max_depth_range:
    rcf = RandomForestClassifier(max_depth = depth, random_state = 0)
    rcf.fit(X_train, Y_train)
    score = rcf.score(X_test, Y_test)
    accuracy.append(score)
    #print(accuracy)
plt.plot(max_depth_range, accuracy)
plt.show()

#testing hyperparameters on characterized human
df = pd.read_csv('categorized_particles_101.csv')
df.type.values.reshape(-1, 1).shape
feat_to_drop = ['type','step','experiment','particle_id', 'ml_type_proba']
max_depth_range = list(range(1,15))
accuracy = []
X=df.drop(feat_to_drop, axis=1)
Y=df['type'].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 0)
for depth in max_depth_range:
    rcf = RandomForestClassifier(max_depth = depth, random_state = 0)
    rcf.fit(X_train, Y_train)
    score = rcf.score(X_test, Y_test)
    accuracy.append(score)
    #print(accuracy)
    #do a log scale to explore higher ranges

plt.plot(max_depth_range, accuracy)
plt.xlabel('max depth')
plt.ylabel('accuracy')
plt.show()
"""

from sklearn.ensemble import RandomForestClassifier
rcf = RandomForestClassifier(random_state = 0)
from pprint import pprint
print('Parameters currently in use:\n')
pprint(rcf.get_params())

#used grid search cv instead, compare
#can ask it for the best model not just best parameters
import numpy as np
from sklearn.model_selection import RandomizedSearchCV
# Number of trees in random forest
n_estimators = [int(x) for x in np.linspace(start = 100, stop = 2000, num = 50)]
# Number of features to consider at every split
max_features = ['auto', 'sqrt']
# Maximum number of levels in tree
max_depth = [int(x) for x in np.linspace(5, 1000, num = 11)]
max_depth.append(None)
# Minimum number of samples required to split a node
min_samples_split = [2, 5, 10]
# Minimum number of samples required at each leaf node
min_samples_leaf = [1, 2, 4]
# Method of selecting samples for training each tree
bootstrap = [True, False]
# Create the random grid
random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf,
               'bootstrap': bootstrap}
pprint(random_grid)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score
import pickle


df = pd.read_csv('categorized_particles_101.csv')
df.type.values.reshape(-1, 1).shape
feat_to_drop = ['type','step','experiment','particle_id', 'ml_type_proba']
X=df.drop(feat_to_drop, axis=1)
Y=df['type'].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 0)
# Use the random grid to search for best hyperparameters
# First create the base model to tune
rcf = RandomForestClassifier()
# Random search of parameters, using 3 fold cross validation,
# search across 100 different combinations, and use all available cores
rcf_random = RandomizedSearchCV(estimator = rcf, param_distributions = random_grid, n_iter = 10, cv = 3, verbose=2,
                random_state=0, n_jobs = -1)
# Fit the random search model

rcf_random.fit(X_train, Y_train)
rcf_random.get_params()
print('best parameters =',rcf_random.best_params_)
best_random = rcf_random.best_estimator_
with open("best hyperparameter model.pcl", "wb") as f:
    pickle.dump(best_random, f)


#Best Model
prediction = best_random.predict(X_test)
accuracy_score(Y_test, prediction)
best_accuracy = accuracy_score(Y_test, prediction)
print('best accuracy score =', accuracy_score(Y_test, prediction))
#f1_score(Y_test, prediction)

#Base Model
rfc_base = RandomForestClassifier(criterion = 'gini', max_depth=3, random_state = 0)
rfc_base.fit(X_train, Y_train)
prediction = rfc_base.predict(X_test)
accuracy_score(Y_test, prediction)
base_accuracy = accuracy_score(Y_test, prediction)
#base_random = rcf_base
#with open("base model rfc.pcl", "wb") as base_model:
    #pickle.dump(base_random, base_model)
print('base accuracy score =', accuracy_score(Y_test, prediction))

print('Improvement of {:0.2f}%'.format(100 * (best_accuracy - base_accuracy) / base_accuracy))

#random search allowed us to narrow down the range for each hyperparameter
#so now that we know where to concentrate our search, we can explicityly specify
#every combo of settings to try
#gridsearch, instad of sampling randomly from a distribution, evaluates all combinates
#we define
from sklearn.model_selection import GridSearchCV
# Create the parameter grid based on the results of random search
from sklearn.model_selection import GridSearchCV
# Create the parameter grid based on the results of random search
param_grid = {
    'bootstrap': [False],
    'max_depth': [200, 400, 600],
    'max_features': [2, 3],
    'min_samples_leaf': [1, 2],
    'min_samples_split': [4, 6],
    'n_estimators': [500, 1000, 1500, 2000]
}
# Create a based model
rfc_grid = RandomForestClassifier()
# Instantiate the grid search model
grid_search = GridSearchCV(estimator = rfc_grid, param_grid = param_grid,
                          cv = 2, n_jobs = -1, verbose = 2)
print('grid search =', grid_search)
with open("rfc grid.pcl", "wb") as basegrid:                
    pickle.dump(grid_search, basegrid)  # Fit the grid search to the data
grid_search.fit(X_train, Y_train)
grid_search.best_params_
print('best parameters for grid search =', grid_search.best_params_)

best_grid = grid_search.best_estimator_
prediction = best_grid.predict(X_test)
accuracy_score(Y_test, prediction)
best_grid_accuracy = accuracy_score(Y_test, prediction)
print('best grid accuracy score = ', accuracy_score(Y_test, prediction))

rfc_grid_base = RandomForestClassifier(criterion = 'gini', max_depth=3, random_state = 0)
rfc_grid_base.fit(X_train, Y_train)
prediction = rfc_grid_base.predict(X_test)
accuracy_score(Y_test, prediction)
base_grid_accuracy = accuracy_score(Y_test, prediction)

#print('best parameters =',rcf_random.best_params_)

print('best parameters for grid search =', grid_search.best_params_)

#print('best random accuracy score =', accuracy_score(Y_test, prediction))
#print('base random accuracy score =', accuracy_score(Y_test, prediction))

print('base grid accuracy score =', accuracy_score(Y_test, prediction))

print('Improvement of {:0.2f}%'.format(100 * (best_grid_accuracy - base_grid_accuracy) / base_grid_accuracy))
#print('Improvement of {:0.2f}% from gridsearch against randomsearchcv'.format(100 * (best_grid_accuracy - base_accuracy) / base_accuracy))

